---
import { Image } from 'astro:assets'
import { getImages, CloudinaryFolders } from '../libs/cloudinary'
import Icon from '../icons/Icon.astro'
import SectionTitle from './SectionTitle.astro'

const images = await getImages({
  cantidad: 12,
  folder: CloudinaryFolders.EnduranceEnjoyers
})

// Ordenar imágenes por nombre de forma descendente
images.sort((a, b) => {
  return a.name.localeCompare(b.name) * -1
})

const { class: className = '', ...props } = Astro.props;
---

  <section class={`spacing-section ${className}`} {...props}>
    <SectionTitle title='Galería de Imágenes' />
    <div
      class='grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-6 w-11/12 md:w-10/12 mx-auto my-10'
    >
      {
      images.map((img) => (
        <div class='relative group overflow-hidden rounded-lg transition-transform duration-300 hover:scale-105 shadow-lg'>
          <div class='aspect-w-4 aspect-h-3 bg-gray-200 animate-pulse'>
            <Image
              src={img.urlTablet}
              alt={img.alt}
              data-original={img.original}
              data-modal-mobile={img.urlModalMobile}
              data-modal-tablet={img.urlModalTablet}
              data-modal-desktop={img.urlModalDesktop}
              data-modal-large={img.urlModalLarge}
              data-modal-extralarge={img.urlModalExtraLarge}
              data-mobile={img.urlMobile}
              data-tablet={img.urlTablet}
              data-desktop={img.urlDesktop}
              data-large={img.urlLarge}
              data-extralarge={img.urlExtraLarge}
              width={400}
              height={300}
              loading='lazy'
              decoding='async'
              class='rounded-lg clickable-img w-full h-full object-cover gallery-image'
              onload="this.parentNode.classList.remove('animate-pulse', 'bg-gray-200')"
            />
          </div>

          {(img.description || img.title) && (
            <div class='absolute px-5 py-3 bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 via-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-b-lg'>
              <h3 class='text-white font-semibold text-base mb-1'>
                {img.title || img.name}
              </h3>
              {img.description && (
                <p class='text-gray-200 text-sm whitespace-pre-line p-0 m-0 leading-snug'>
                  {img.description}
                </p>
              )}
            </div>
          )}
        </div>
      ))
    }
    </div>

    <div
      id='imageModal'
      role='dialog'
      aria-modal='true'
      aria-hidden='true'
      class='fixed inset-0 bg-black bg-opacity-95 flex items-center justify-center z-50 opacity-0 scale-95 pointer-events-none transition-all duration-300 ease-out p-4 md:p-8'
    >
      <button
        id='closeModal'
        class='absolute top-4 right-4 bg-white text-black rounded-full w-10 h-10 flex items-center justify-center font-bold shadow-lg z-10 hover:bg-gray-100 transition-colors duration-200'
        aria-label='Cerrar galería'
      >
        <Icon name='close' size='sm' class='text-black' />
      </button>
      <button
        id='prevImage'
        class='absolute left-4 top-1/2 -translate-y-1/2 bg-white/80 text-black rounded-full w-10 h-10 flex items-center justify-center font-bold shadow-lg z-10 hover:bg-white transition-colors duration-200 hidden md:flex'
        aria-label='Imagen anterior'
      >
        <svg xmlns='http://www.w3.org/2000/svg' class='h-6 w-6' fill='none' viewBox='0 0 24 24' stroke='currentColor'>
          <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M15 19l-7-7 7-7' />
        </svg>
      </button>
      <button
        id='nextImage'
        class='absolute right-4 top-1/2 -translate-y-1/2 bg-white/80 text-black rounded-full w-10 h-10 flex items-center justify-center font-bold shadow-lg z-10 hover:bg-white transition-colors duration-200 hidden md:flex'
        aria-label='Imagen siguiente'
      >
        <svg xmlns='http://www.w3.org/2000/svg' class='h-6 w-6' fill='none' viewBox='0 0 24 24' stroke='currentColor'>
          <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9 5l7 7-7 7' />
        </svg>
      </button>
      <div class='relative w-full h-full flex items-center justify-center'>
        <div id='imageLoading' class='absolute inset-0 flex items-center justify-center'>
          <div class='animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white' />
        </div>
        <img
          id='modalImage'
          src=''
          alt=''
          class='max-w-full max-h-full object-contain rounded shadow-2xl'
          onload="document.getElementById('imageLoading').style.display='none'"
        />
      </div>
    </div>
  </section>

    <script>
document.addEventListener('DOMContentLoaded', () => {
  const modal = document.getElementById('imageModal')
  const modalImg = document.getElementById('modalImage')
  const closeBtn = document.getElementById('closeModal')
  const prevBtn = document.getElementById('prevImage')
  const nextBtn = document.getElementById('nextImage')
  const loadingIndicator = document.getElementById('imageLoading')
  const galleryImages = document.querySelectorAll('.clickable-img')
  let currentImageIndex = 0

  // Función para obtener la URL de modal apropiada según el tamaño de pantalla
  const getModalImageUrl = (img) => {
    const screenWidth = window.innerWidth

    if (screenWidth < 640) {
      return img.getAttribute('data-modal-mobile')
    } else if (screenWidth < 768) {
      return img.getAttribute('data-modal-tablet')
    } else if (screenWidth < 1024) {
      return img.getAttribute('data-modal-desktop')
    } else if (screenWidth < 1440) {
      return img.getAttribute('data-modal-large')
    } else {
      return img.getAttribute('data-modal-extralarge')
    }
  }

  const openModal = (imgSrc, imgAlt, index) => {
    currentImageIndex = index
    loadingIndicator.style.display = 'flex'
    modalImg.src = imgSrc
    modalImg.alt = imgAlt
    document.body.style.overflow = 'hidden'

    modal.classList.remove('opacity-0', 'scale-95', 'pointer-events-none')
    modal.classList.add('opacity-100', 'scale-100', 'pointer-events-auto')
    modal.setAttribute('aria-hidden', 'false')

    // Mostrar/ocultar botones de navegación según corresponda
    updateNavigationButtons()
  }

  const closeModal = () => {
    document.body.style.overflow = ''

    modal.classList.add('opacity-0', 'scale-95', 'pointer-events-none')
    modal.classList.remove(
      'opacity-100',
      'scale-100',
      'pointer-events-auto'
    )
    modal.setAttribute('aria-hidden', 'true')

    setTimeout(() => {
      modalImg.src = ''
      modalImg.alt = ''
    }, 300)
  }

  const showPrevImage = () => {
    if (currentImageIndex > 0) {
      currentImageIndex--
      const prevImg = galleryImages[currentImageIndex]
      const modalSrc = getModalImageUrl(prevImg)
      const altText = prevImg.getAttribute('alt') || ''
      loadingIndicator.style.display = 'flex'
      modalImg.src = modalSrc
      modalImg.alt = altText
      updateNavigationButtons()
    }
  }

  const showNextImage = () => {
    if (currentImageIndex < galleryImages.length - 1) {
      currentImageIndex++
      const nextImg = galleryImages[currentImageIndex]
      const modalSrc = getModalImageUrl(nextImg)
      const altText = nextImg.getAttribute('alt') || ''
      loadingIndicator.style.display = 'flex'
      modalImg.src = modalSrc
      modalImg.alt = altText
      updateNavigationButtons()
    }
  }

  const updateNavigationButtons = () => {
    // Mostrar/ocultar botones según la posición actual
    if (currentImageIndex <= 0) {
      prevBtn.classList.add('opacity-50', 'cursor-not-allowed')
    } else {
      prevBtn.classList.remove('opacity-50', 'cursor-not-allowed')
    }

    if (currentImageIndex >= galleryImages.length - 1) {
      nextBtn.classList.add('opacity-50', 'cursor-not-allowed')
    } else {
      nextBtn.classList.remove('opacity-50', 'cursor-not-allowed')
    }
  }

  // Añadir event listeners a las imágenes de la galería
  galleryImages.forEach((img, index) => {
    img.addEventListener('click', () => {
      const modalSrc = getModalImageUrl(img)
      const altText = img.getAttribute('alt') || ''
      openModal(modalSrc, altText, index)
    })
  })

  // Event listeners para los botones de navegación
  closeBtn.addEventListener('click', closeModal)
  prevBtn.addEventListener('click', showPrevImage)
  nextBtn.addEventListener('click', showNextImage)

  // Cerrar modal al hacer clic fuera de la imagen
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal()
    }
  })

  // Navegación con teclado
  document.addEventListener('keydown', (e) => {
    if (modal.getAttribute('aria-hidden') === 'false') {
      if (e.key === 'Escape') {
        closeModal()
      } else if (e.key === 'ArrowLeft') {
        showPrevImage()
      } else if (e.key === 'ArrowRight') {
        showNextImage()
      }
    }
  })

  // Soporte para gestos táctiles en dispositivos móviles
  let touchStartX = 0
  let touchEndX = 0

  modalImg.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX
  })

  modalImg.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX
    handleSwipe()
  })

  const handleSwipe = () => {
    const swipeThreshold = 50
    if (touchEndX < touchStartX - swipeThreshold) {
      // Deslizar a la izquierda (siguiente imagen)
      showNextImage()
    } else if (touchEndX > touchStartX + swipeThreshold) {
      // Deslizar a la derecha (imagen anterior)
      showPrevImage()
    }
  }
})
    </script>
