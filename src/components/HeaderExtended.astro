---
import sample from '../assets/banner.png'
import { getImage } from 'astro:assets'

// Generar múltiples versiones optimizadas de la imagen
const bannerImages = {
  small: await getImage({ src: sample, width: 640, format: 'webp', quality: 80 }),
  medium: await getImage({ src: sample, width: 1024, format: 'webp', quality: 80 }),
  large: await getImage({ src: sample, width: 1536, format: 'webp', quality: 80 }),
  xlarge: await getImage({ src: sample, width: 2048, format: 'webp', quality: 80 }),
  // Imagen pequeña para placeholder inicial
  placeholder: await getImage({ src: sample, width: 640, format: 'webp', quality: 100 })
}

const props = Astro.props
---
  <div {...props}>
    <!-- Preload de imágenes críticas -->
    <link rel='preload' as='image' href={bannerImages.medium.src} media='(min-width: 640px) and (max-width: 1023px)' />
    <link rel='preload' as='image' href={bannerImages.large.src} media='(min-width: 1024px) and (max-width: 1535px)' />
    <link rel='preload' as='image' href={bannerImages.xlarge.src} media='(min-width: 1536px)' />
    <link rel='preload' as='image' href={bannerImages.small.src} media='(max-width: 639px)' />

    <div
      id='navbardir'
      class='relative w-full aspect-[2.5/1] sm:aspect-[3/1] md:aspect-[3.5/1] bg-cover bg-center bg-no-repeat z-10 transition-all duration-500'
      style={`background-image: url(${bannerImages.placeholder.src}); background-size: cover;`}
    >
      <nav id='navbar' class='fixed top-0 left-0 w-full flex items-center justify-between h-16 md:h-20 px-4 md:px-6 bg-transparent transition-all duration-300 z-30'>
        <div id='scroll-logo' class='absolute left-4 hidden transition-all duration-300'>
          <a href='/'>
            <img src='/logotextclear.webp' alt='Logo Endurance Enjoyers' class='h-8 md:h-12 lg:h-15 w-auto' />
          </a>
        </div>

        <!-- Menú para pantallas medianas y grandes -->
        <div class='mx-auto hidden md:flex space-x-6 lg:space-x-8 text-base lg:text-lg font-medium text-white'>
          <a href='#home' class='hover:text-hover transition-colors duration-300 py-2 px-3 rounded'>Inicio</a>
          <a href='#calendario' class='hover:text-hover transition-colors duration-300 py-2 px-3 rounded'>Calendario</a>
          <a href='#novedades' class='hover:text-hover transition-colors duration-300 py-2 px-3 rounded'>Novedades</a>
          <a href='#galeria' class='hover:text-hover transition-colors duration-300 py-2 px-3 rounded'>Galería</a>
          <a href='#contacto' class='hover:text-hover transition-colors duration-300 py-2 px-3 rounded'>Contacto</a>

        </div>

        <!-- Botón de menú móvil -->
        <button id='mobile-menu-button' class='md:hidden absolute right-4 text-white p-2'>
          <svg xmlns='http://www.w3.org/2000/svg' class='h-6 w-6' fill='none' viewBox='0 0 24 24' stroke='currentColor'>
            <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 6h16M4 12h16M4 18h16' />
          </svg>
        </button>
      </nav>

      <!-- Menú móvil desplegable -->
      <div id='mobile-menu' class='fixed inset-0 bg-primary-header bg-opacity-95 z-20 transform translate-x-full transition-transform duration-300 ease-in-out md:hidden'>
        <div class='flex flex-col items-center justify-center h-full space-y-8 text-xl font-medium text-white'>
          <button id='close-menu' class='absolute top-4 right-4 text-white p-2'>
            <svg xmlns='http://www.w3.org/2000/svg' class='h-6 w-6' fill='none' viewBox='0 0 24 24' stroke='currentColor'>
              <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 18L18 6M6 6l12 12' />
            </svg>
          </button>
          <a href='#home' class='hover:text-hover transition-colors duration-300 py-2 px-3 rounded'>Inicio</a>
          <a href='#calendario' class='hover:text-hover transition-colors duration-300 py-2 px-3 rounded'>Calendario</a>
          <a href='#novedades' class='hover:text-hover transition-colors duration-300 py-2 px-3 rounded'>Novedades</a>
          <a href='#galeria' class='hover:text-hover transition-colors duration-300 py-2 px-3 rounded'>Galería</a>
          <a href='#contacto' class='hover:text-hover transition-colors duration-300 py-2 px-3 rounded'>Contacto</a>
        </div>
      </div>
    </div>
  </div>

    <script define:vars={{ bannerImages }}>
  // URLs de las diferentes versiones de la imagen
  const imagePaths = {
    small: bannerImages.small.src,
    medium: bannerImages.medium.src,
    large: bannerImages.large.src,
    xlarge: bannerImages.xlarge.src
  }

  const navbardir = document.getElementById('navbardir')
  const logo = document.getElementById('scroll-logo')
  const navbar = document.getElementById('navbar')
  const mobileMenuButton = document.getElementById('mobile-menu-button')
  const closeMenuButton = document.getElementById('close-menu')
  const mobileMenu = document.getElementById('mobile-menu')
  const mobileMenuLinks = mobileMenu?.querySelectorAll('a')

  // Función para establecer la imagen del banner según el ancho de la pantalla
  function setBannerImage () {
    if (!navbardir) return

    const screenWidth = window.innerWidth
    let imageUrl

    if (screenWidth < 640) {
      imageUrl = imagePaths.small
    } else if (screenWidth < 1024) {
      imageUrl = imagePaths.medium
    } else if (screenWidth < 1536) {
      imageUrl = imagePaths.large
    } else {
      imageUrl = imagePaths.xlarge
    }

    // Precargar la imagen antes de aplicarla
    const img = new Image()
    img.onload = function () {
      navbardir.style.backgroundImage = `url(${imageUrl})`
    }
    img.src = imageUrl
  }

  // Throttle function para mejorar el rendimiento en resize
  function throttle (func, limit) {
    let inThrottle
    return function () {
      const args = arguments
      const context = this
      if (!inThrottle) {
        func.apply(context, args)
        inThrottle = true
        setTimeout(() => {
          inThrottle = false
        }, limit)
      }
    }
  }

  // Función para abrir el menú móvil
  const openMobileMenu = () => {
    mobileMenu?.classList.remove('translate-x-full')
    document.body.style.overflow = 'hidden'
  }

  // Función para cerrar el menú móvil
  const closeMobileMenu = () => {
    mobileMenu?.classList.add('translate-x-full')
    document.body.style.overflow = ''
  }

  // Establecer la imagen inicial cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    setBannerImage()

    // Event listeners para el menú móvil
    mobileMenuButton?.addEventListener('click', openMobileMenu)
    closeMenuButton?.addEventListener('click', closeMobileMenu)

    // Cerrar el menú al hacer clic en un enlace
    mobileMenuLinks?.forEach(link => {
      link.addEventListener('click', closeMobileMenu)
    })
  })

  // Actualizar la imagen cuando cambie el tamaño de la ventana (con throttle)
  window.addEventListener('resize', throttle(setBannerImage, 250))

  // Manejar el cambio de estilo del navbar al hacer scroll
  window.addEventListener('scroll', () => {
    if (!navbardir || !logo || !navbar) return

    const style = getComputedStyle(navbardir)
    const marginTop = parseFloat(style.marginTop)
    const marginBottom = parseFloat(style.marginBottom)
    const alturaConMargen = navbardir.offsetHeight + marginTop + marginBottom

    if (window.scrollY > alturaConMargen / 3) {
      logo.classList.remove('hidden')
      navbar.classList.remove('bg-transparent')
      navbar.classList.add('bg-primary-header', 'shadow')
    } else {
      logo.classList.add('hidden')
      navbar.classList.add('bg-transparent')
      navbar.classList.remove('bg-primary-header', 'shadow')
    }
  })
    </script>
