---
import sample from '../assets/banner.png'
import { getImage } from 'astro:assets'

// Generar múltiples versiones optimizadas de la imagen
const bannerImages = {
  small: await getImage({ src: sample, width: 640, format: 'webp' }),
  medium: await getImage({ src: sample, width: 1024, format: 'webp' }),
  large: await getImage({ src: sample, width: 1536, format: 'webp' }),
  xlarge: await getImage({ src: sample, width: 2048, format: 'webp' })
}

const props = Astro.props
---
  <div {...props}>
    <div id='navbardir' class='relative w-full aspect-[2.5/1] sm:aspect-[3/1] md:aspect-[3.5/1] bg-cover bg-center bg-no-repeat z-50'>
      <nav id='navbar' class='fixed top-0 left-0 w-full flex items-center justify-between h-16 md:h-20 px-4 md:px-6 bg-transparent transition-all duration-300 z-10'>
        <div id='scroll-logo' class='absolute left-4 hidden transition-all duration-300'>
          <img src='/logotextclear.webp' alt='Logo' class='h-8 md:h-12 lg:h-15' />
        </div>

        <!-- Mobile menu button -->
        <button id='mobile-menu-btn' class='md:hidden ml-auto z-20 p-2 text-white'>
          <svg class='w-6 h-6' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
            <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 6h16M4 12h16M4 18h16' />
          </svg>
        </button>

        <!-- Desktop navigation -->
        <div class='hidden md:flex mx-auto space-x-6 lg:space-x-13 text-base lg:text-lg font-medium text-white'>
          <a href='#home' class='hover:text-hover transition-colors'>Inicio</a>
          <a href='#novedades' class='hover:text-hover transition-colors'>Novedades</a>
          <a href='#galeria' class='hover:text-hover transition-colors'>Galería</a>
          <a href='#contacto' class='hover:text-hover transition-colors'>Contacto</a>
        </div>

        <!-- Mobile navigation -->
        <div id='mobile-menu' class='fixed inset-0 bg-primary-header bg-opacity-95 z-10 transform translate-x-full transition-transform duration-300 md:hidden'>
          <div class='flex flex-col items-center justify-center h-full space-y-8 text-xl font-medium text-white'>
            <a href='#home' class='hover:text-hover transition-colors mobile-nav-link'>Inicio</a>
            <a href='#novedades' class='hover:text-hover transition-colors mobile-nav-link'>Novedades</a>
            <a href='#galeria' class='hover:text-hover transition-colors mobile-nav-link'>Galería</a>
            <a href='#contacto' class='hover:text-hover transition-colors mobile-nav-link'>Contacto</a>
          </div>
        </div>
      </nav>
    </div>
  </div>

    <script define:vars={{ bannerImages }}>
  // URLs de las diferentes versiones de la imagen
  const imagePaths = {
    small: bannerImages.small.src,
    medium: bannerImages.medium.src,
    large: bannerImages.large.src,
    xlarge: bannerImages.xlarge.src
  }

  const navbardir = document.getElementById('navbardir')
  const logo = document.getElementById('scroll-logo')
  const navbar = document.getElementById('navbar')

  // Función para establecer la imagen del banner según el ancho de la pantalla
  function setBannerImage () {
    if (!navbardir) return

    const screenWidth = window.innerWidth
    let imageUrl

    if (screenWidth < 640) {
      imageUrl = imagePaths.small
    } else if (screenWidth < 1024) {
      imageUrl = imagePaths.medium
    } else if (screenWidth < 1536) {
      imageUrl = imagePaths.large
    } else {
      imageUrl = imagePaths.xlarge
    }

    navbardir.style.backgroundImage = `url(${imageUrl})`
  }

  // Establecer la imagen inicial cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', setBannerImage)

  // Actualizar la imagen cuando cambie el tamaño de la ventana
  window.addEventListener('resize', setBannerImage)

  window.addEventListener('scroll', () => {
    if (!navbardir || !logo || !navbar) return

    const style = getComputedStyle(navbardir)
    const marginTop = parseFloat(style.marginTop)
    const marginBottom = parseFloat(style.marginBottom)
    const alturaConMargen = navbardir.offsetHeight + marginTop + marginBottom

    if (window.scrollY > alturaConMargen / 3) {
      logo.classList.remove('hidden')
      navbar.classList.remove('bg-transparent')
      navbar.classList.add('bg-primary-header', 'shadow')
    } else {
      logo.classList.add('hidden')
      navbar.classList.add('bg-transparent')
      navbar.classList.remove('bg-primary-header', 'shadow')
    }
  })

  // Mobile menu functionality
  const mobileMenuBtn = document.getElementById('mobile-menu-btn')
  const mobileMenu = document.getElementById('mobile-menu')
  const mobileNavLinks = document.querySelectorAll('.mobile-nav-link')

  mobileMenuBtn?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('translate-x-full')
  })

  mobileNavLinks.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('translate-x-full')
    })
  })
    </script>
